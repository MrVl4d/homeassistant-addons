---
name: "RTSP Recorder"
version: "1.0.1"
slug: "rtsp_recorder"
description: >-
  Record segments from one or more RTSP streams and notify another service
  when each video segment is created.
url: "https://example.com/rtsp_recorder"
init: false
startup: application
# Supported CPU architectures. Most Home Assistant installations will use one of
# these. See https://developers.home-assistant.io/docs/add-ons/configuration/#arch
# for details.
arch:
  - aarch64
  - amd64
  - armhf
  - armv7
  - i386

# Map the media directory read/write so video recordings can be accessed by the
# user. The config directory is mapped read/write so we can read the
# add-on options file and persist any state if needed.
map:
  - media:rw
  - config:rw

# Expose the GPU render node into the container so that VA-API can access it
# when hardware acceleration is enabled. This maps the entire /dev/dri
# directory; adjust if your hardware requires a different path. Without
# specifying this, ffmpeg will not be able to access the GPU.
devices:
  - /dev/dri

# Default configuration values. Users can override these in the add-on UI.
options:
  streams: []
  default_setpts: 1.0
  default_expected_duration: 60
  # Base directory where clips are stored. The recorder will create a
  # subdirectory for each day in the format YYYY.MM.DD under this path,
  # so the final path of a file looks like /media/camera/YYYY.MM.DD/stream_name_timestamp.mp4.
  output_dir: "/media/camera"
  # When enabled the recorder will leverage VA-API hardware acceleration for
  # decoding and encoding. This requires that your host's GPU device is
  # passed into the container (see the `devices` section below) and that
  # appropriate drivers (e.g. intel-media-driver) are installed in the container.
  use_hwaccel: false
  # Path to the VA-API render node to use when hardware acceleration is enabled.
  hw_device: "/dev/dri/renderD128"
  # Global quality setting for VA-API encoders. Lower values improve quality but
  # increase file size. This is ignored when software encoding is used.
  global_quality: 39
  # Maximum file size in megabytes. Set to 0 to disable. If enabled, ffmpeg will
  # stop writing to the output file when this limit is reached. Note that
  # time-based recording still applies, so this is an additional safeguard.
  max_filesize_mb: 0
  event_url: null
  # Optional payload template for the HTTP event. If set, the recorder will
  # construct the POST body using this template instead of sending a JSON
  # payload. Placeholders enclosed in curly braces will be replaced with
  # variables: {stream}, {url}, {file}, {path}, {timestamp}, {success}. The
  # resulting string is sent as form data (content-type: application/x-www-form-urlencoded).
  event_body_template: null

# Schema defines the validation rules for user supplied options. See the
# developer documentation for supported data types. Nested dictionaries and
# arrays are allowed up to two levels deep. The `?` suffix makes a field
# optional when no default is provided in `options`.
schema:
  streams:
    - url: str
      name: str?
      expected_duration: int?
      setpts: float?
  default_setpts: float
  default_expected_duration: int
  output_dir: str?
  event_url: url?
  event_body_template: str?
  use_hwaccel: bool
  hw_device: str?
  global_quality: int?
  max_filesize_mb: int?